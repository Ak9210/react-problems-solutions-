import React, { useState, useEffect } from 'react';

const CatCardsInfiniteScroll = () => {
  const [cats, setCats] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [page, setPage] = useState(1);

  const fetchCatData = async () => {
    if (loading) return; 
    setLoading(true);
    setError(null);
    try {
      const response = await fetch(`https://api.thecatapi.com/v1/images/search?limit=5&page=${page}&order=Desc`);
      const data = await response.json();
      if (data.length === 0) {
        setError('No more data available');
      } else {
        setCats((prevCats) => [...prevCats, ...data]);
      }
    } catch (err) {
      setError('Failed to fetch data');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCatData();
  }, [page]);

  useEffect(() => {
    const handleScroll = () => {
      if (window.innerHeight + document.documentElement.scrollTop >= document.documentElement.offsetHeight - 100 && !loading && !error) {
        setPage((prevPage) => prevPage + 1);
      }
    };
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [loading, error]);

  return (
    <div>
      <h1>Cat Images (Infinite Scroll)</h1>

      {/* Render loading, error, and empty states */}
      {loading && <p>Loading...</p>}
      {error && <p>{error}</p>}
      {cats.length === 0 && !loading && !error && <p>No data available</p>}

      {/* Render the cat images in a single column */}
      <div style={{ display: 'flex', flexDirection: 'column', gap: '20px' }}>
        {cats.map((cat) => (
          <div key={cat.id} style={{ border: '1px solid #ccc', padding: '10px', width: '300px', margin: '0 auto' }}>
            <img src={cat.url} alt="Cat" style={{ width: '100%', height: 'auto' }} />
          </div>
        ))}
      </div>

      {/* Show a loading message when more data is being fetched */}
      {loading && <p>Loading more images...</p>}
    </div>
  );
};

export default CatCardsInfiniteScroll;
